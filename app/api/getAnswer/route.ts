// app/api/getAnswer/route.ts
import { Readability } from "@mozilla/readability";
import { JSDOM } from "jsdom";
import { z } from "zod";
import { RateLimiter } from "limiter"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @types/limiter
import { OllamaAIStream } from "@/utils/OllamaAIStream";

// üîí –°—Ç—Ä–æ–≥–∞—è —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const RequestSchema = z.object({
  question: z.string().min(3).max(500),
  sources: z.array(
    z.object({
      url: z.string().url(),
      name: z.string().optional()
    })
  ).max(10)
});

// üö¶ –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
const limiter = new RateLimiter({
  tokensPerInterval: 5,
  interval: "minute"
});

export async function POST(request: Request) {
  const startTime = Date.now();

  try {
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const payload = await request.json();
    const { question, sources } = RequestSchema.parse(payload);

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    await limiter.removeTokens(1);

    // 3. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const finalResults = await Promise.allSettled(
      sources.map(async (source) => {
        try {
          const response = await fetchWithTimeout(source.url);
          const html = await response.text();

          // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          const doc = new JSDOM(html).window.document;
          const parsed = new Readability(doc).parse();

          return {
            ...source,
            fullContent: parsed
              ? cleanText(parsed.textContent || '')
              : "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
          };
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${source.url}:`, error);
          return { ...source, fullContent: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å" };
        }
      })
    );

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const mainPrompt = createSmartPrompt(finalResults);

    // 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ payload –¥–ª—è OllamaAIStream
    const aiStreamPayload = {
      messages: [
        { role: "system", content: mainPrompt },
        { role: "user", content: question }
      ],
      stream: true
    };

    // 6. –í—ã–∑–æ–≤ OllamaAIStream
    return await OllamaAIStream(new Request(JSON.stringify(aiStreamPayload), {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    }));

  } catch (error) {
    // 7. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    return handleError(error, startTime);
  }
}

// üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function createSmartPrompt(results: any[]): string {
  const validContexts = results
    .filter(r => r.status === 'fulfilled')
    .map(r => r.value.fullContent);

  return `
    –î–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:
    –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${validContexts.join('\n\n')}
    –í–æ–ø—Ä–æ—Å: {question}
  `;
}

function handleError(error: unknown, startTime: number) {
  const duration = Date.now() - startTime;

  console.error("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);

  if (error instanceof z.ZodError) {
    return new Response(JSON.stringify({
      error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
      details: error.errors
    }), { status: 400 });
  }

  return new Response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–≤–∞—Ä–∏—è üõ∏", {
    status: 500,
    headers: {
      "X-Error-Duration": duration.toString()
    }
  });
}

// üßº –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function cleanText(text: string): string {
  return text
    .trim()
    .replace(/(\n){4,}/g, "\n\n\n")     // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    .replace(/\n\n/g, " ")               // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    .replace(/ {3,}/g, "  ")             // Normalize –ø—Ä–æ–±–µ–ª–æ–≤
    .replace(/\t/g, "")                  // –£–¥–∞–ª—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏
    .replace(/\n+(\s*\n)*/g, "\n")       // –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
    .substring(0, 20000);                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

// üï∞Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(
  url: string,
  options: RequestInit = {},
  timeout = 5000  // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 5 —Å–µ–∫—É–Ω–¥
): Promise<Response> {
  const controller = new AbortController();
  const { signal } = controller;

  const fetchTimeout = setTimeout(() => {
    controller.abort();
  }, timeout);

  try {
    const response = await fetch(url, {
      ...options,
      signal,
      headers: {
        'User-Agent': 'Mozilla/5.0 OllamaIntelligentFetcher',
        ...options.headers
      }
    });

    clearTimeout(fetchTimeout);
    return response;
  } catch (error) {
    if (error instanceof Error && error.name === "AbortError") {
      throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ${url}`);
    }
    throw error;
  }
}